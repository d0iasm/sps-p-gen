// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steps_2eproto;
namespace data {
class Step;
class StepDefaultTypeInternal;
extern StepDefaultTypeInternal _Step_default_instance_;
class Step_Particle;
class Step_ParticleDefaultTypeInternal;
extern Step_ParticleDefaultTypeInternal _Step_Particle_default_instance_;
class Steps;
class StepsDefaultTypeInternal;
extern StepsDefaultTypeInternal _Steps_default_instance_;
}  // namespace data
PROTOBUF_NAMESPACE_OPEN
template<> ::data::Step* Arena::CreateMaybeMessage<::data::Step>(Arena*);
template<> ::data::Step_Particle* Arena::CreateMaybeMessage<::data::Step_Particle>(Arena*);
template<> ::data::Steps* Arena::CreateMaybeMessage<::data::Steps>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data {

// ===================================================================

class Step_Particle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data.Step.Particle) */ {
 public:
  Step_Particle();
  virtual ~Step_Particle();

  Step_Particle(const Step_Particle& from);
  Step_Particle(Step_Particle&& from) noexcept
    : Step_Particle() {
    *this = ::std::move(from);
  }

  inline Step_Particle& operator=(const Step_Particle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Step_Particle& operator=(Step_Particle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Step_Particle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Step_Particle* internal_default_instance() {
    return reinterpret_cast<const Step_Particle*>(
               &_Step_Particle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Step_Particle& a, Step_Particle& b) {
    a.Swap(&b);
  }
  inline void Swap(Step_Particle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Step_Particle* New() const final {
    return CreateMaybeMessage<Step_Particle>(nullptr);
  }

  Step_Particle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Step_Particle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Step_Particle& from);
  void MergeFrom(const Step_Particle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Step_Particle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data.Step.Particle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steps_2eproto);
    return ::descriptor_table_steps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKparamsFieldNumber = 3,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kSatisfactionFieldNumber = 4,
  };
  // repeated sint32 kparams = 3;
  int kparams_size() const;
  private:
  int _internal_kparams_size() const;
  public:
  void clear_kparams();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kparams(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_kparams() const;
  void _internal_add_kparams(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_kparams();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 kparams(int index) const;
  void set_kparams(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_kparams(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      kparams() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_kparams();

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float satisfaction = 4;
  void clear_satisfaction();
  float satisfaction() const;
  void set_satisfaction(float value);
  private:
  float _internal_satisfaction() const;
  void _internal_set_satisfaction(float value);
  public:

  // @@protoc_insertion_point(class_scope:data.Step.Particle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > kparams_;
  mutable std::atomic<int> _kparams_cached_byte_size_;
  float x_;
  float y_;
  float satisfaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steps_2eproto;
};
// -------------------------------------------------------------------

class Step :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data.Step) */ {
 public:
  Step();
  virtual ~Step();

  Step(const Step& from);
  Step(Step&& from) noexcept
    : Step() {
    *this = ::std::move(from);
  }

  inline Step& operator=(const Step& from) {
    CopyFrom(from);
    return *this;
  }
  inline Step& operator=(Step&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Step& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Step* internal_default_instance() {
    return reinterpret_cast<const Step*>(
               &_Step_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Step& a, Step& b) {
    a.Swap(&b);
  }
  inline void Swap(Step* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Step* New() const final {
    return CreateMaybeMessage<Step>(nullptr);
  }

  Step* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Step>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Step& from);
  void MergeFrom(const Step& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Step* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data.Step";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steps_2eproto);
    return ::descriptor_table_steps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Step_Particle Particle;

  // accessors -------------------------------------------------------

  enum : int {
    kParticlesFieldNumber = 2,
    kStepFieldNumber = 1,
    kStaticEnergyFieldNumber = 3,
    kDynamicEnergyFieldNumber = 4,
    kStaticEnergyVarianceFieldNumber = 5,
    kDynamicEnergyVarianceFieldNumber = 6,
    kXValueFieldNumber = 7,
    kVValueFieldNumber = 8,
    kClusteringFieldNumber = 9,
  };
  // repeated .data.Step.Particle particles = 2;
  int particles_size() const;
  private:
  int _internal_particles_size() const;
  public:
  void clear_particles();
  ::data::Step_Particle* mutable_particles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step_Particle >*
      mutable_particles();
  private:
  const ::data::Step_Particle& _internal_particles(int index) const;
  ::data::Step_Particle* _internal_add_particles();
  public:
  const ::data::Step_Particle& particles(int index) const;
  ::data::Step_Particle* add_particles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step_Particle >&
      particles() const;

  // int32 step = 1;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float static_energy = 3;
  void clear_static_energy();
  float static_energy() const;
  void set_static_energy(float value);
  private:
  float _internal_static_energy() const;
  void _internal_set_static_energy(float value);
  public:

  // float dynamic_energy = 4;
  void clear_dynamic_energy();
  float dynamic_energy() const;
  void set_dynamic_energy(float value);
  private:
  float _internal_dynamic_energy() const;
  void _internal_set_dynamic_energy(float value);
  public:

  // float static_energy_variance = 5;
  void clear_static_energy_variance();
  float static_energy_variance() const;
  void set_static_energy_variance(float value);
  private:
  float _internal_static_energy_variance() const;
  void _internal_set_static_energy_variance(float value);
  public:

  // float dynamic_energy_variance = 6;
  void clear_dynamic_energy_variance();
  float dynamic_energy_variance() const;
  void set_dynamic_energy_variance(float value);
  private:
  float _internal_dynamic_energy_variance() const;
  void _internal_set_dynamic_energy_variance(float value);
  public:

  // float x_value = 7;
  void clear_x_value();
  float x_value() const;
  void set_x_value(float value);
  private:
  float _internal_x_value() const;
  void _internal_set_x_value(float value);
  public:

  // float v_value = 8;
  void clear_v_value();
  float v_value() const;
  void set_v_value(float value);
  private:
  float _internal_v_value() const;
  void _internal_set_v_value(float value);
  public:

  // int32 clustering = 9;
  void clear_clustering();
  ::PROTOBUF_NAMESPACE_ID::int32 clustering() const;
  void set_clustering(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clustering() const;
  void _internal_set_clustering(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:data.Step)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step_Particle > particles_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_;
  float static_energy_;
  float dynamic_energy_;
  float static_energy_variance_;
  float dynamic_energy_variance_;
  float x_value_;
  float v_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 clustering_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steps_2eproto;
};
// -------------------------------------------------------------------

class Steps :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data.Steps) */ {
 public:
  Steps();
  virtual ~Steps();

  Steps(const Steps& from);
  Steps(Steps&& from) noexcept
    : Steps() {
    *this = ::std::move(from);
  }

  inline Steps& operator=(const Steps& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steps& operator=(Steps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Steps* internal_default_instance() {
    return reinterpret_cast<const Steps*>(
               &_Steps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Steps& a, Steps& b) {
    a.Swap(&b);
  }
  inline void Swap(Steps* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steps* New() const final {
    return CreateMaybeMessage<Steps>(nullptr);
  }

  Steps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steps>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steps& from);
  void MergeFrom(const Steps& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data.Steps";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steps_2eproto);
    return ::descriptor_table_steps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsFieldNumber = 1,
  };
  // repeated .data.Step steps = 1;
  int steps_size() const;
  private:
  int _internal_steps_size() const;
  public:
  void clear_steps();
  ::data::Step* mutable_steps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step >*
      mutable_steps();
  private:
  const ::data::Step& _internal_steps(int index) const;
  ::data::Step* _internal_add_steps();
  public:
  const ::data::Step& steps(int index) const;
  ::data::Step* add_steps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step >&
      steps() const;

  // @@protoc_insertion_point(class_scope:data.Steps)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step > steps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Step_Particle

// float x = 1;
inline void Step_Particle::clear_x() {
  x_ = 0;
}
inline float Step_Particle::_internal_x() const {
  return x_;
}
inline float Step_Particle::x() const {
  // @@protoc_insertion_point(field_get:data.Step.Particle.x)
  return _internal_x();
}
inline void Step_Particle::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Step_Particle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:data.Step.Particle.x)
}

// float y = 2;
inline void Step_Particle::clear_y() {
  y_ = 0;
}
inline float Step_Particle::_internal_y() const {
  return y_;
}
inline float Step_Particle::y() const {
  // @@protoc_insertion_point(field_get:data.Step.Particle.y)
  return _internal_y();
}
inline void Step_Particle::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Step_Particle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:data.Step.Particle.y)
}

// repeated sint32 kparams = 3;
inline int Step_Particle::_internal_kparams_size() const {
  return kparams_.size();
}
inline int Step_Particle::kparams_size() const {
  return _internal_kparams_size();
}
inline void Step_Particle::clear_kparams() {
  kparams_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Step_Particle::_internal_kparams(int index) const {
  return kparams_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Step_Particle::kparams(int index) const {
  // @@protoc_insertion_point(field_get:data.Step.Particle.kparams)
  return _internal_kparams(index);
}
inline void Step_Particle::set_kparams(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  kparams_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.Step.Particle.kparams)
}
inline void Step_Particle::_internal_add_kparams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  kparams_.Add(value);
}
inline void Step_Particle::add_kparams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_kparams(value);
  // @@protoc_insertion_point(field_add:data.Step.Particle.kparams)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Step_Particle::_internal_kparams() const {
  return kparams_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Step_Particle::kparams() const {
  // @@protoc_insertion_point(field_list:data.Step.Particle.kparams)
  return _internal_kparams();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Step_Particle::_internal_mutable_kparams() {
  return &kparams_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Step_Particle::mutable_kparams() {
  // @@protoc_insertion_point(field_mutable_list:data.Step.Particle.kparams)
  return _internal_mutable_kparams();
}

// float satisfaction = 4;
inline void Step_Particle::clear_satisfaction() {
  satisfaction_ = 0;
}
inline float Step_Particle::_internal_satisfaction() const {
  return satisfaction_;
}
inline float Step_Particle::satisfaction() const {
  // @@protoc_insertion_point(field_get:data.Step.Particle.satisfaction)
  return _internal_satisfaction();
}
inline void Step_Particle::_internal_set_satisfaction(float value) {
  
  satisfaction_ = value;
}
inline void Step_Particle::set_satisfaction(float value) {
  _internal_set_satisfaction(value);
  // @@protoc_insertion_point(field_set:data.Step.Particle.satisfaction)
}

// -------------------------------------------------------------------

// Step

// int32 step = 1;
inline void Step::clear_step() {
  step_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Step::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Step::step() const {
  // @@protoc_insertion_point(field_get:data.Step.step)
  return _internal_step();
}
inline void Step::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_ = value;
}
inline void Step::set_step(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:data.Step.step)
}

// repeated .data.Step.Particle particles = 2;
inline int Step::_internal_particles_size() const {
  return particles_.size();
}
inline int Step::particles_size() const {
  return _internal_particles_size();
}
inline void Step::clear_particles() {
  particles_.Clear();
}
inline ::data::Step_Particle* Step::mutable_particles(int index) {
  // @@protoc_insertion_point(field_mutable:data.Step.particles)
  return particles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step_Particle >*
Step::mutable_particles() {
  // @@protoc_insertion_point(field_mutable_list:data.Step.particles)
  return &particles_;
}
inline const ::data::Step_Particle& Step::_internal_particles(int index) const {
  return particles_.Get(index);
}
inline const ::data::Step_Particle& Step::particles(int index) const {
  // @@protoc_insertion_point(field_get:data.Step.particles)
  return _internal_particles(index);
}
inline ::data::Step_Particle* Step::_internal_add_particles() {
  return particles_.Add();
}
inline ::data::Step_Particle* Step::add_particles() {
  // @@protoc_insertion_point(field_add:data.Step.particles)
  return _internal_add_particles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step_Particle >&
Step::particles() const {
  // @@protoc_insertion_point(field_list:data.Step.particles)
  return particles_;
}

// float static_energy = 3;
inline void Step::clear_static_energy() {
  static_energy_ = 0;
}
inline float Step::_internal_static_energy() const {
  return static_energy_;
}
inline float Step::static_energy() const {
  // @@protoc_insertion_point(field_get:data.Step.static_energy)
  return _internal_static_energy();
}
inline void Step::_internal_set_static_energy(float value) {
  
  static_energy_ = value;
}
inline void Step::set_static_energy(float value) {
  _internal_set_static_energy(value);
  // @@protoc_insertion_point(field_set:data.Step.static_energy)
}

// float dynamic_energy = 4;
inline void Step::clear_dynamic_energy() {
  dynamic_energy_ = 0;
}
inline float Step::_internal_dynamic_energy() const {
  return dynamic_energy_;
}
inline float Step::dynamic_energy() const {
  // @@protoc_insertion_point(field_get:data.Step.dynamic_energy)
  return _internal_dynamic_energy();
}
inline void Step::_internal_set_dynamic_energy(float value) {
  
  dynamic_energy_ = value;
}
inline void Step::set_dynamic_energy(float value) {
  _internal_set_dynamic_energy(value);
  // @@protoc_insertion_point(field_set:data.Step.dynamic_energy)
}

// float static_energy_variance = 5;
inline void Step::clear_static_energy_variance() {
  static_energy_variance_ = 0;
}
inline float Step::_internal_static_energy_variance() const {
  return static_energy_variance_;
}
inline float Step::static_energy_variance() const {
  // @@protoc_insertion_point(field_get:data.Step.static_energy_variance)
  return _internal_static_energy_variance();
}
inline void Step::_internal_set_static_energy_variance(float value) {
  
  static_energy_variance_ = value;
}
inline void Step::set_static_energy_variance(float value) {
  _internal_set_static_energy_variance(value);
  // @@protoc_insertion_point(field_set:data.Step.static_energy_variance)
}

// float dynamic_energy_variance = 6;
inline void Step::clear_dynamic_energy_variance() {
  dynamic_energy_variance_ = 0;
}
inline float Step::_internal_dynamic_energy_variance() const {
  return dynamic_energy_variance_;
}
inline float Step::dynamic_energy_variance() const {
  // @@protoc_insertion_point(field_get:data.Step.dynamic_energy_variance)
  return _internal_dynamic_energy_variance();
}
inline void Step::_internal_set_dynamic_energy_variance(float value) {
  
  dynamic_energy_variance_ = value;
}
inline void Step::set_dynamic_energy_variance(float value) {
  _internal_set_dynamic_energy_variance(value);
  // @@protoc_insertion_point(field_set:data.Step.dynamic_energy_variance)
}

// float x_value = 7;
inline void Step::clear_x_value() {
  x_value_ = 0;
}
inline float Step::_internal_x_value() const {
  return x_value_;
}
inline float Step::x_value() const {
  // @@protoc_insertion_point(field_get:data.Step.x_value)
  return _internal_x_value();
}
inline void Step::_internal_set_x_value(float value) {
  
  x_value_ = value;
}
inline void Step::set_x_value(float value) {
  _internal_set_x_value(value);
  // @@protoc_insertion_point(field_set:data.Step.x_value)
}

// float v_value = 8;
inline void Step::clear_v_value() {
  v_value_ = 0;
}
inline float Step::_internal_v_value() const {
  return v_value_;
}
inline float Step::v_value() const {
  // @@protoc_insertion_point(field_get:data.Step.v_value)
  return _internal_v_value();
}
inline void Step::_internal_set_v_value(float value) {
  
  v_value_ = value;
}
inline void Step::set_v_value(float value) {
  _internal_set_v_value(value);
  // @@protoc_insertion_point(field_set:data.Step.v_value)
}

// int32 clustering = 9;
inline void Step::clear_clustering() {
  clustering_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Step::_internal_clustering() const {
  return clustering_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Step::clustering() const {
  // @@protoc_insertion_point(field_get:data.Step.clustering)
  return _internal_clustering();
}
inline void Step::_internal_set_clustering(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clustering_ = value;
}
inline void Step::set_clustering(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clustering(value);
  // @@protoc_insertion_point(field_set:data.Step.clustering)
}

// -------------------------------------------------------------------

// Steps

// repeated .data.Step steps = 1;
inline int Steps::_internal_steps_size() const {
  return steps_.size();
}
inline int Steps::steps_size() const {
  return _internal_steps_size();
}
inline void Steps::clear_steps() {
  steps_.Clear();
}
inline ::data::Step* Steps::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:data.Steps.steps)
  return steps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step >*
Steps::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:data.Steps.steps)
  return &steps_;
}
inline const ::data::Step& Steps::_internal_steps(int index) const {
  return steps_.Get(index);
}
inline const ::data::Step& Steps::steps(int index) const {
  // @@protoc_insertion_point(field_get:data.Steps.steps)
  return _internal_steps(index);
}
inline ::data::Step* Steps::_internal_add_steps() {
  return steps_.Add();
}
inline ::data::Step* Steps::add_steps() {
  // @@protoc_insertion_point(field_add:data.Steps.steps)
  return _internal_add_steps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data::Step >&
Steps::steps() const {
  // @@protoc_insertion_point(field_list:data.Steps.steps)
  return steps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steps_2eproto
