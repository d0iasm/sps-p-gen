// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steps.proto

#include "steps.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_steps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Step_steps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_steps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Step_Particle_steps_2eproto;
namespace data {
class Step_ParticleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Step_Particle> _instance;
} _Step_Particle_default_instance_;
class StepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Step> _instance;
} _Step_default_instance_;
class StepsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Steps> _instance;
} _Steps_default_instance_;
}  // namespace data
static void InitDefaultsscc_info_Step_steps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data::_Step_default_instance_;
    new (ptr) ::data::Step();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data::Step::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Step_steps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Step_steps_2eproto}, {
      &scc_info_Step_Particle_steps_2eproto.base,}};

static void InitDefaultsscc_info_Step_Particle_steps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data::_Step_Particle_default_instance_;
    new (ptr) ::data::Step_Particle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data::Step_Particle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Step_Particle_steps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Step_Particle_steps_2eproto}, {}};

static void InitDefaultsscc_info_Steps_steps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data::_Steps_default_instance_;
    new (ptr) ::data::Steps();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data::Steps::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Steps_steps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Steps_steps_2eproto}, {
      &scc_info_Step_steps_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steps_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steps_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steps_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::Step_Particle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data::Step_Particle, x_),
  PROTOBUF_FIELD_OFFSET(::data::Step_Particle, y_),
  PROTOBUF_FIELD_OFFSET(::data::Step_Particle, kparams_),
  PROTOBUF_FIELD_OFFSET(::data::Step_Particle, satisfaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::Step, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data::Step, step_),
  PROTOBUF_FIELD_OFFSET(::data::Step, particles_),
  PROTOBUF_FIELD_OFFSET(::data::Step, static_energy_),
  PROTOBUF_FIELD_OFFSET(::data::Step, dynamic_energy_),
  PROTOBUF_FIELD_OFFSET(::data::Step, static_energy_variance_),
  PROTOBUF_FIELD_OFFSET(::data::Step, dynamic_energy_variance_),
  PROTOBUF_FIELD_OFFSET(::data::Step, x_value_),
  PROTOBUF_FIELD_OFFSET(::data::Step, v_value_),
  PROTOBUF_FIELD_OFFSET(::data::Step, clustering_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data::Steps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data::Steps, steps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::data::Step_Particle)},
  { 9, -1, sizeof(::data::Step)},
  { 23, -1, sizeof(::data::Steps)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data::_Step_Particle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data::_Step_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data::_Steps_default_instance_),
};

const char descriptor_table_protodef_steps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013steps.proto\022\004data\"\253\002\n\004Step\022\014\n\004step\030\001 \001"
  "(\005\022&\n\tparticles\030\002 \003(\0132\023.data.Step.Partic"
  "le\022\025\n\rstatic_energy\030\003 \001(\002\022\026\n\016dynamic_ene"
  "rgy\030\004 \001(\002\022\036\n\026static_energy_variance\030\005 \001("
  "\002\022\037\n\027dynamic_energy_variance\030\006 \001(\002\022\017\n\007x_"
  "value\030\007 \001(\002\022\017\n\007v_value\030\010 \001(\002\022\022\n\nclusteri"
  "ng\030\t \001(\005\032G\n\010Particle\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001"
  "(\002\022\017\n\007kparams\030\003 \003(\021\022\024\n\014satisfaction\030\004 \001("
  "\002\"\"\n\005Steps\022\031\n\005steps\030\001 \003(\0132\n.data.Stepb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steps_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_steps_2eproto_sccs[3] = {
  &scc_info_Step_steps_2eproto.base,
  &scc_info_Step_Particle_steps_2eproto.base,
  &scc_info_Steps_steps_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steps_2eproto_once;
static bool descriptor_table_steps_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steps_2eproto = {
  &descriptor_table_steps_2eproto_initialized, descriptor_table_protodef_steps_2eproto, "steps.proto", 365,
  &descriptor_table_steps_2eproto_once, descriptor_table_steps_2eproto_sccs, descriptor_table_steps_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_steps_2eproto::offsets,
  file_level_metadata_steps_2eproto, 3, file_level_enum_descriptors_steps_2eproto, file_level_service_descriptors_steps_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steps_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_steps_2eproto)), true);
namespace data {

// ===================================================================

void Step_Particle::InitAsDefaultInstance() {
}
class Step_Particle::_Internal {
 public:
};

Step_Particle::Step_Particle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Step.Particle)
}
Step_Particle::Step_Particle(const Step_Particle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kparams_(from.kparams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&satisfaction_) -
    reinterpret_cast<char*>(&x_)) + sizeof(satisfaction_));
  // @@protoc_insertion_point(copy_constructor:data.Step.Particle)
}

void Step_Particle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&satisfaction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(satisfaction_));
}

Step_Particle::~Step_Particle() {
  // @@protoc_insertion_point(destructor:data.Step.Particle)
  SharedDtor();
}

void Step_Particle::SharedDtor() {
}

void Step_Particle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Step_Particle& Step_Particle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Step_Particle_steps_2eproto.base);
  return *internal_default_instance();
}


void Step_Particle::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Step.Particle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kparams_.Clear();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&satisfaction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(satisfaction_));
  _internal_metadata_.Clear();
}

const char* Step_Particle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated sint32 kparams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_kparams(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_kparams(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float satisfaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          satisfaction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Step_Particle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Step.Particle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // repeated sint32 kparams = 3;
  {
    int byte_size = _kparams_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          3, _internal_kparams(), byte_size, target);
    }
  }

  // float satisfaction = 4;
  if (!(this->satisfaction() <= 0 && this->satisfaction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_satisfaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Step.Particle)
  return target;
}

size_t Step_Particle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Step.Particle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 kparams = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->kparams_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kparams_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float satisfaction = 4;
  if (!(this->satisfaction() <= 0 && this->satisfaction() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Step_Particle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Step.Particle)
  GOOGLE_DCHECK_NE(&from, this);
  const Step_Particle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Step_Particle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Step.Particle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Step.Particle)
    MergeFrom(*source);
  }
}

void Step_Particle::MergeFrom(const Step_Particle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Step.Particle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kparams_.MergeFrom(from.kparams_);
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.satisfaction() <= 0 && from.satisfaction() >= 0)) {
    _internal_set_satisfaction(from._internal_satisfaction());
  }
}

void Step_Particle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Step.Particle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Step_Particle::CopyFrom(const Step_Particle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Step.Particle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Step_Particle::IsInitialized() const {
  return true;
}

void Step_Particle::InternalSwap(Step_Particle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kparams_.InternalSwap(&other->kparams_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(satisfaction_, other->satisfaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Step_Particle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Step::InitAsDefaultInstance() {
}
class Step::_Internal {
 public:
};

Step::Step()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Step)
}
Step::Step(const Step& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      particles_(from.particles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&step_, &from.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&clustering_) -
    reinterpret_cast<char*>(&step_)) + sizeof(clustering_));
  // @@protoc_insertion_point(copy_constructor:data.Step)
}

void Step::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Step_steps_2eproto.base);
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clustering_) -
      reinterpret_cast<char*>(&step_)) + sizeof(clustering_));
}

Step::~Step() {
  // @@protoc_insertion_point(destructor:data.Step)
  SharedDtor();
}

void Step::SharedDtor() {
}

void Step::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Step& Step::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Step_steps_2eproto.base);
  return *internal_default_instance();
}


void Step::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  particles_.Clear();
  ::memset(&step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clustering_) -
      reinterpret_cast<char*>(&step_)) + sizeof(clustering_));
  _internal_metadata_.Clear();
}

const char* Step::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .data.Step.Particle particles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_particles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // float static_energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          static_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dynamic_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          dynamic_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float static_energy_variance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          static_energy_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dynamic_energy_variance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          dynamic_energy_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          x_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float v_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          v_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 clustering = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          clustering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Step::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step = 1;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_step(), target);
  }

  // repeated .data.Step.Particle particles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_particles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_particles(i), target, stream);
  }

  // float static_energy = 3;
  if (!(this->static_energy() <= 0 && this->static_energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_static_energy(), target);
  }

  // float dynamic_energy = 4;
  if (!(this->dynamic_energy() <= 0 && this->dynamic_energy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dynamic_energy(), target);
  }

  // float static_energy_variance = 5;
  if (!(this->static_energy_variance() <= 0 && this->static_energy_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_static_energy_variance(), target);
  }

  // float dynamic_energy_variance = 6;
  if (!(this->dynamic_energy_variance() <= 0 && this->dynamic_energy_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_dynamic_energy_variance(), target);
  }

  // float x_value = 7;
  if (!(this->x_value() <= 0 && this->x_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_x_value(), target);
  }

  // float v_value = 8;
  if (!(this->v_value() <= 0 && this->v_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_v_value(), target);
  }

  // int32 clustering = 9;
  if (this->clustering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_clustering(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Step)
  return target;
}

size_t Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Step)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data.Step.Particle particles = 2;
  total_size += 1UL * this->_internal_particles_size();
  for (const auto& msg : this->particles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 step = 1;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_step());
  }

  // float static_energy = 3;
  if (!(this->static_energy() <= 0 && this->static_energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float dynamic_energy = 4;
  if (!(this->dynamic_energy() <= 0 && this->dynamic_energy() >= 0)) {
    total_size += 1 + 4;
  }

  // float static_energy_variance = 5;
  if (!(this->static_energy_variance() <= 0 && this->static_energy_variance() >= 0)) {
    total_size += 1 + 4;
  }

  // float dynamic_energy_variance = 6;
  if (!(this->dynamic_energy_variance() <= 0 && this->dynamic_energy_variance() >= 0)) {
    total_size += 1 + 4;
  }

  // float x_value = 7;
  if (!(this->x_value() <= 0 && this->x_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float v_value = 8;
  if (!(this->v_value() <= 0 && this->v_value() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 clustering = 9;
  if (this->clustering() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_clustering());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Step::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Step)
  GOOGLE_DCHECK_NE(&from, this);
  const Step* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Step>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Step)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Step)
    MergeFrom(*source);
  }
}

void Step::MergeFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Step)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  particles_.MergeFrom(from.particles_);
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
  if (!(from.static_energy() <= 0 && from.static_energy() >= 0)) {
    _internal_set_static_energy(from._internal_static_energy());
  }
  if (!(from.dynamic_energy() <= 0 && from.dynamic_energy() >= 0)) {
    _internal_set_dynamic_energy(from._internal_dynamic_energy());
  }
  if (!(from.static_energy_variance() <= 0 && from.static_energy_variance() >= 0)) {
    _internal_set_static_energy_variance(from._internal_static_energy_variance());
  }
  if (!(from.dynamic_energy_variance() <= 0 && from.dynamic_energy_variance() >= 0)) {
    _internal_set_dynamic_energy_variance(from._internal_dynamic_energy_variance());
  }
  if (!(from.x_value() <= 0 && from.x_value() >= 0)) {
    _internal_set_x_value(from._internal_x_value());
  }
  if (!(from.v_value() <= 0 && from.v_value() >= 0)) {
    _internal_set_v_value(from._internal_v_value());
  }
  if (from.clustering() != 0) {
    _internal_set_clustering(from._internal_clustering());
  }
}

void Step::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Step::CopyFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Step::IsInitialized() const {
  return true;
}

void Step::InternalSwap(Step* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  particles_.InternalSwap(&other->particles_);
  swap(step_, other->step_);
  swap(static_energy_, other->static_energy_);
  swap(dynamic_energy_, other->dynamic_energy_);
  swap(static_energy_variance_, other->static_energy_variance_);
  swap(dynamic_energy_variance_, other->dynamic_energy_variance_);
  swap(x_value_, other->x_value_);
  swap(v_value_, other->v_value_);
  swap(clustering_, other->clustering_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Step::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Steps::InitAsDefaultInstance() {
}
class Steps::_Internal {
 public:
};

Steps::Steps()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Steps)
}
Steps::Steps(const Steps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data.Steps)
}

void Steps::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Steps_steps_2eproto.base);
}

Steps::~Steps() {
  // @@protoc_insertion_point(destructor:data.Steps)
  SharedDtor();
}

void Steps::SharedDtor() {
}

void Steps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Steps& Steps::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Steps_steps_2eproto.base);
  return *internal_default_instance();
}


void Steps::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Steps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  _internal_metadata_.Clear();
}

const char* Steps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data.Step steps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Steps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Steps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data.Step steps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_steps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Steps)
  return target;
}

size_t Steps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data.Steps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data.Step steps = 1;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Steps)
  GOOGLE_DCHECK_NE(&from, this);
  const Steps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Steps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Steps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Steps)
    MergeFrom(*source);
  }
}

void Steps::MergeFrom(const Steps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Steps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
}

void Steps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Steps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steps::CopyFrom(const Steps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Steps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steps::IsInitialized() const {
  return true;
}

void Steps::InternalSwap(Steps* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  steps_.InternalSwap(&other->steps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Steps::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::data::Step_Particle* Arena::CreateMaybeMessage< ::data::Step_Particle >(Arena* arena) {
  return Arena::CreateInternal< ::data::Step_Particle >(arena);
}
template<> PROTOBUF_NOINLINE ::data::Step* Arena::CreateMaybeMessage< ::data::Step >(Arena* arena) {
  return Arena::CreateInternal< ::data::Step >(arena);
}
template<> PROTOBUF_NOINLINE ::data::Steps* Arena::CreateMaybeMessage< ::data::Steps >(Arena* arena) {
  return Arena::CreateInternal< ::data::Steps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
